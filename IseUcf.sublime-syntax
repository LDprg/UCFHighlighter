%YAML 1.2
---
name: ISE UCF
uuid: EDE7FFE3-F4DD-4BE1-94D9-ED7F973D2237
file_extensions: [ucf]
scope: source.ucf

variables:
  address: '(?:&[HX][0-9a-fA-F]{4}|[$#&][0-9a-fA-F]{4}|\b0X[0-9a-fA-F]{4}|\b0[a-fA-F]{4}H|\b[0-9]{4}H|[0-9]{4,5}D)\b'
  binary: '(?:%[01]+|[01]+B)\b'
  comment: '(?:;.+)'
  conditionals: '(?i)\b(?:NC|NZ|PE|PO|C|M|P|Z)\b'
  decimal: '(?:[0-9]+D|[0-9]+)'
  hexidecimal: '(?:&[HX][0-9a-fA-F]{2}|[$#&][0-9a-fA-F]{2}|\b0X[0-9a-fA-F]{2}|\b0[a-fA-F]{2}H|\b[0-9]{2}H)\b'
  label: '\b[a-zA-Z][a-zA-Z0-9_]*[a-zA-Z0-9]\b'
  label_multi: '{{label}}(?:[~&^|+-]{{label}})*'
  number: '(?:{{binary}}|{{octal}}|{{hexidecimal}}|{{decimal}})'
  octal: '(?:&O[0-7]+|[0-7]+[OQ])\b'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: strings
    - include: operators
    - include: labels
    - include: numbers

  operators:
    - match: '(?i)\b(LOC|IOSTANDARD|PERIOD)\b'
      scope: variable.function.ucf
    - match: '\s(!=|##|&&|<<|<=|>>|>=|\||\|\||[&$%*+/=?~><|!-]|=)\s'
      scope: keyword.control.ucf

  numbers:
    - match: '.{{decimal}}'
      scope: constant.numeric.integer.ucf

  strings:
    - match: '"'
      comment: 'Strings begin/end with double quotes'
      scope: punctuation.definition.string.begin.ucf
      push: inside_string
  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.ucf
    - match: '\\.'
      scope: constant.character.escape.ucf
    - match: '"'
      scope: punctuation.definition.string.end.ucf
      pop: true

  labels:
    - match: '^({{label}}):?'
      comment: 'Label definition'
      captures:
        1: entity.name.function.ucf
    - match: '^ +({{label}}):'
      comment: 'Indented label definition'
      captures:
        1: entity.name.function.ucf
    - match: '\({{label_multi}}\)'
      comment: 'Address of label'
      scope: variable.parameter.ucf
    - match: ', ?({{label_multi}})\b'
      comment: 'Labels used in instructions'
      captures:
        1: variable.function.ucf

  comments:
    - match: '#'
      comment: 'Comments begin with a "#" and finish at EOL'
      scope: punctuation.definition.comment.ucf
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.ucf
        - match: $\n?
          pop: true
